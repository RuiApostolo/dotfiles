" slightly lighter background
let g:molokai_original = 1


" general options
set encoding=utf-8
set t_Co=256
set number relativenumber
set autoread
set wrap
set linebreak
set tabstop=2
set shiftwidth=2
set softtabstop=4
set expandtab
set showcmd
set cursorline
set wildmenu
set showmatch
set incsearch
set hlsearch
set backup
set writebackup
set modeline
set backspace=indent,eol,start
set background=dark
set splitbelow
set splitright
set mouse=a
set scrolloff=10

" set folding
set foldmethod=indent
set foldlevel=99

" Enable folding with the spacebar
nnoremap <space> za

" molokai color scheme
colorscheme molokai

" remap for moving around in splits
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" fortran definitions
let fortran_free_source=1
let fortan_more_precise=1
let fortran_do_enddo=1

" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>


" custom syntax files
so $HOME/.vim/myfiletypes.vim

" vim-plug enable
" filetype plugin indent on
syntax on

" Add home directory to runtimepath
set rtp^=$HOME

" Ubuntu only
" Triger `autoread` when files changes on disk
set autoread
" https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
" https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif
" Notification after file change
" https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
autocmd FileChangedShellPost *
  \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None

" Diffs current file with changed version (when vim refuses to reload it automatically)
command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis



" Options for plugins
" vimtex options
let g:tex_flavor = "latex"
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
set conceallevel=1
let g:tex_conceal='abdmg'
let g:vimtex_complete_bib_simple=1

" neomake options
let g:neomake_open_list = 2
" call neomake#configure#automake('nrwi', 500)

" utilsnips options
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetsDir="~/.vim/ultisnips"
let g:UltiSnipsSnippetDirectories=["ultisnips"]
" Add home directory to runtimepath
set rtp^=$HOME

"NerdCommenter options
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1
" Align line-wise comment delimiters flush left instead of following code
" indentation - for python
let g:NERDDefaultAlign = 'left'
" for lammps
let g:NERDCustomDelimiters = { 'lammps': { 'left': '#' } }
" hotkeys
nmap <C-_>   <Plug>NERDCommenterToggle
vmap <C-_>   <Plug>NERDCommenterToggle<CR>gv
" imap <C-_>   <esc><Plug>NERDCommenterToggle<CR>i

" SimpylFold options
" let g:SimpylFold_docstring_preview=1

" vim-airline options
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme = 'powerlineish'

let $LOCALFILE=expand("~/.vimrc_local")
if filereadable($LOCALFILE)
    source $LOCALFILE
endif
