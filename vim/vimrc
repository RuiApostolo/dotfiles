" slightly lighter background
let g:molokai_original = 1


" general options
set encoding=utf-8
set t_Co=256
set number relativenumber
set autoread
set wrap
set linebreak
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set showcmd
set cursorline
set cursorcolumn
set wildignorecase
set wildmenu
set wildmode=longest:full,full
set wildignore+=*~,*.bmp,*.gif,*.jpg,*.png,*.pdf,*.tga,*.cml,*.ods
set showmatch
set incsearch
set hlsearch
set backup
set writebackup
set modeline
set backspace=indent,eol,start
set background=dark
set splitbelow
set splitright
set mouse=a
set scrolloff=10
set completeopt=menuone,preview,noinsert,noselect

" for searching / pattern matching
set ignorecase
set smartcase

" traces.vim and abolish.vim integration
let g:traces_abolish_integration = 1

" file undo:
set undodir=~/.vim/undofiles
set undofile
set undolevels=10000

" set folding
set foldmethod=indent
set foldlevel=99

" Enable folding with the spacebar
nnoremap <space> za

" molokai color scheme
colorscheme molokai

" remap for moving around in splits
nnoremap <C-Up> <C-W><C-K>
nnoremap <C-Down> <C-W><C-J>
nnoremap <C-Left> <C-W><C-H>
nnoremap <C-Right> <C-W><C-L>

" fortran definitions
let fortran_free_source=1
let fortan_more_precise=1
let fortran_do_enddo=1

" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>


" custom syntax files
so $HOME/.vim/myfiletypes.vim

" vim-plug enable
filetype plugin on
syntax on

" Ubuntu only
" Triger `autoread` when files changes on disk
set autoread
" https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
" https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif
" Notification after file change
" https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
autocmd FileChangedShellPost *
  \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None

" Diffs current file with changed version (when vim refuses to reload it automatically)
command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis



" Options for plugins
" vimtex options
let g:tex_flavor = "latex"
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
set conceallevel=1
let g:tex_conceal='abdmg'
let g:vimtex_complete_bib_simple=1

" neomake options
let g:neomake_open_list = 2
" call neomake#configure#automake('nrwi', 500)

" utilsnips options
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetsDir="~/.vim/ultisnips"
let g:UltiSnipsSnippetDirectories=["ultisnips"]
" Add home directory to runtimepath
set rtp^=$HOME

"NerdCommenter options
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1
" Align line-wise comment delimiters flush left instead of following code
" indentation - for python
let g:NERDDefaultAlign = 'left'
" for lammps
let g:NERDCustomDelimiters = { 'lammps': { 'left': '#' } }
" hotkeys
nmap <C-_>   <Plug>NERDCommenterToggle
vmap <C-_>   <Plug>NERDCommenterTogglegv
" imap <C-_>   <esc><Plug>NERDCommenterToggle<CR>i

" UndoTree
nnoremap <F5> :UndotreeToggle<cr>


" SimpylFold options
" let g:SimpylFold_docstring_preview=1

" pymode options
let g:pymode_rope_completion = 1
let g:pymode_rope_completion_on_dot = 1
let g:pymode_rope_completion_bind = '<C-Space>'
let g:pymode_rope_autoimport_after_complete = 1

let g:pymode_rope_goto_defenition_bind = '<C-f>g'
let g:pymode_rope_rename_bind = '<C-f>rr'
let g:pymode_rope_use_function_bind = '<C-f>ru'


" supertab
let g:SuperTabDefaultCompletionType = "<c-n>"


" vim-airline options
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme = 'powerlineish'

" indentLine options:
let g:indentLine_char_list = ['|', '¦', '┆', '┊']
" kinda related, changes tabs to - and spaces to ·
set list
set lcs=tab:>-,space:·
" set lcs+=eol:

" vertical alignement
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

nnoremap <CR> o<Esc>k

" markdown fold
autocmd FileType markdown set foldexpr=NestedMarkdownFolds()


" python run testing
" imap <F6> <Esc>:w<CR>:!clear;python3 %<CR>
" nmap <F6> <Esc>:w<CR>:!clear;"%:p"<CR>
nmap <F6> <Esc>:w<CR>:!clear;python3 %<CR>

" pytest
nmap <silent><Leader>n <Esc>:Pytest next<CR>
nmap <silent><Leader>e <Esc>:Pytest error<CR>
nmap <silent><Leader>t <Esc>:Pytest project<CR>
nmap <silent><Leader>f <Esc>:Pytest file<CR>
nmap <silent><Leader>c <Esc>:Pytest class<CR>
nmap <silent><Leader>m <Esc>:Pytest method<CR>


let $LOCALFILE=expand("~/.vimrc_local")
if filereadable($LOCALFILE)
    source $LOCALFILE
endif

" enable man pages
runtime! ftplugin/man.vim

" pymode options
let g:pymode_rope = 0
let g:pymode_rope_completion = 1
let g:pymode_rope_completion_on_dot = 1
let g:pymode_rope_completion_bind = '<C-Space>'
let g:pymode_rope_autoimport_after_complete = 1

let g:pymode_rope_goto_defenition_bind = '<C-f>g'
let g:pymode_rope_rename_bind = '<C-f>rr'
let g:pymode_rope_use_function_bind = '<C-f>ru'

" python run testing
" imap <F6> <Esc>:w<CR>:!clear;python3 %<CR>
nmap <F6> <Esc>:w<CR>:!clear;"%:p"<CR>

" if has("autocmd")
"   augroup templates
"     autocmd BufNewFile *.py 0r ~/.vim/templates/skeleton.py
"   augroup END
" endif


" vertical alignement
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction
